#!/bin/bash

# That script will be executed on a VM as a root user. It will be at first rendered using the Terraform templatefile function.
# We are using here variables provided by that function:
# - username





# === Below sections are setting up Kubernetes. ===

# ========= Install containerd. That is a container runtime used for running containers in Kubernetes. =========

apt-get install -y containerd
mkdir -p /etc/containerd
containerd config default | tee /etc/containerd/config.toml

# Change the 'SystemdCgroup = false' into the 'SystemdCgroup = true' in the /etc/containerd/config.toml
# This tells containerd to use the systemd to manage cgroups which manages resources (CPU, RAM etc).
# I think it is necessary because kubelet is using systemd for that purpose as well.
sed -i 's/^\([[:space:]]*SystemdCgroup = \)false/\1true/' /etc/containerd/config.toml
systemctl restart containerd

# Add a path to the containerd socket to the crictl.yaml so the crictl can communicate with containerd.
# It is not needed for running Kubernetes but it might be useful for debugging containerd using crictl.
echo "runtime-endpoint: unix:///var/run/containerd/containerd.sock" >> /etc/crictl.yaml






# ======= Install kubeadm, kubelet, and kubectl - Tools needed for Kubernetes. ========

apt-get install -y apt-transport-https ca-certificates
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add the GPG key and APT repository URL to the kubernetes.list. That url will be used to pull Kubernetes packages (like kubectl)
cat << EOF >> /etc/apt/sources.list.d/kubernetes.list
deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
EOF

apt-get update
echo | apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl







# ========= Initialize Kubernetes using Calico. ==========

# disable swap (it's required by Kubernetes).
swapoff -a
sed -i '/ swap / s/^/#/' /etc/fstab

# create a k8s folder. We will be using it for storing files relevant to Kubernetes (like manifests).
mkdir /home/${username}/k8s

# Load the br_netfilter module. It is needed so the iptables can filter network traffic that goes through Linux bridges,
# such as communication between Kubernetes Pods.
modprobe br_netfilter
echo 'br_netfilter' | tee /etc/modules-load.d/k8s.conf

# Modify kernel parametrs using sysctl
cat <<EOF | tee /etc/sysctl.d/k8s.conf
# Enable filterring network traffic that goes through Linux bridges using iptables
net.bridge.bridge-nf-call-iptables = 1
# Enable IP forwarding for IPv4
net.ipv4.ip_forward = 1
EOF

# Apply the settings
sysctl --system




# ======= Create a sample Spark script =========

# Create a sample Spark script which we can run on Kubernetes. It needs to be on the VM2 as well since Spark Driver and Executors Pods might be 
# created on this node and they need to access this script which is mounted to Pods using volumes.
mkdir /home/${username}/notebooks

# Create a sample Spark script for running in Kubernetes (for testing).
cat << 'EOF' >> /home/${username}/notebooks/my_script.py
from pyspark.sql import SparkSession
spark = SparkSession.builder \
    .appName("SparkTest") \
    .getOrCreate()

df = spark.range(0, 10)
df.show()
EOF
